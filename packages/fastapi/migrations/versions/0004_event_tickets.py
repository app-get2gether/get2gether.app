"""event_tickets

Revision ID: 0004
Revises: 0003
Create Date: 2024-06-05 19:51:10.144631

"""
from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "0004"
down_revision: Union[str, None] = "0003"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "event_banks",
        sa.Column("event_id", sa.UUID(), nullable=False),
        sa.Column("is_locked", sa.Boolean(), nullable=False),
        sa.Column("total_offchain_funds", sa.BigInteger(), nullable=False),
        sa.Column("total_onchain_funds", sa.BigInteger(), nullable=False),
        sa.Column("withdrawn_offchain_funds", sa.BigInteger(), nullable=False),
        sa.Column("withdrawn_onchain_funds", sa.BigInteger(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("deleted_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.CheckConstraint(
            "total_offchain_funds >= withdrawn_offchain_funds",
            name=op.f("ck_event_banks_ck_event_banks_total_offchain_funds"),
        ),
        sa.CheckConstraint(
            "total_onchain_funds >= withdrawn_onchain_funds",
            name=op.f("ck_event_banks_ck_event_banks_total_onchain_funds"),
        ),
        sa.ForeignKeyConstraint(
            ["event_id"], ["events.id"], name=op.f("fk_event_banks_events_event_id")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_event_banks")),
        sa.UniqueConstraint("event_id", name=op.f("uq_event_banks_event_id")),
    )
    op.create_index(
        "ix_event_banks_event_id", "event_banks", ["event_id"], unique=False
    )
    op.create_table(
        "event_ticket_types",
        sa.Column("event_id", sa.UUID(), nullable=False),
        sa.Column("ticket_type", sa.Enum("REGULAR", name="tickettype"), nullable=False),
        sa.Column("price", sa.BigInteger(), nullable=False),
        sa.Column("currency", sa.Enum("GET", name="ticketcurrency"), nullable=False),
        sa.Column("total_count", sa.Integer(), nullable=False),
        sa.Column("sold_count", sa.Integer(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("deleted_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.CheckConstraint(
            "price >= 0", name=op.f("ck_event_ticket_types_ck_event_ticket_types_price")
        ),
        sa.CheckConstraint(
            "sold_count >= 0",
            name=op.f("ck_event_ticket_types_ck_event_ticket_types_sold_count"),
        ),
        sa.CheckConstraint(
            "total_count >= -1",
            name=op.f("ck_event_ticket_types_ck_event_ticket_types_total_count"),
        ),
        sa.ForeignKeyConstraint(
            ["event_id"],
            ["events.id"],
            name=op.f("fk_event_ticket_types_events_event_id"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_event_ticket_types")),
    )
    op.create_index(
        "ix_event_ticket_types_event_id",
        "event_ticket_types",
        ["event_id"],
        unique=False,
    )
    op.create_table(
        "event_purchased_tickets",
        sa.Column("event_id", sa.UUID(), nullable=False),
        sa.Column("ticket_type_id", sa.UUID(), nullable=False),
        sa.Column("owned_by", sa.UUID(), nullable=False),
        sa.Column("price", sa.BigInteger(), nullable=False),
        sa.Column("is_onchain", sa.Boolean(), nullable=False),
        sa.Column(
            "onchain_status",
            sa.Enum("PENDING", "CONFIRMED", "REJECTED", name="ticketonchainstatus"),
            nullable=True,
        ),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("deleted_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.CheckConstraint(
            "is_onchain = TRUE OR onchain_status IS NULL",
            name=op.f(
                "ck_event_purchased_tickets_ck_event_purchased_tickets_onchain_status"
            ),
        ),
        sa.CheckConstraint(
            "price >= 0",
            name=op.f("ck_event_purchased_tickets_ck_event_purchased_tickets_price"),
        ),
        sa.ForeignKeyConstraint(
            ["event_id"],
            ["events.id"],
            name=op.f("fk_event_purchased_tickets_events_event_id"),
        ),
        sa.ForeignKeyConstraint(
            ["owned_by"],
            ["users.id"],
            name=op.f("fk_event_purchased_tickets_users_owned_by"),
        ),
        sa.ForeignKeyConstraint(
            ["ticket_type_id"],
            ["event_ticket_types.id"],
            name=op.f("fk_event_purchased_tickets_event_ticket_types_ticket_type_id"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_event_purchased_tickets")),
    )
    op.create_index(
        "ix_event_purchased_tickets_event_id",
        "event_purchased_tickets",
        ["event_id"],
        unique=False,
    )
    op.create_index(
        "ix_event_purchased_tickets_owned_by",
        "event_purchased_tickets",
        ["owned_by"],
        unique=False,
    )
    op.add_column("users", sa.Column("onchain_funds", sa.BigInteger(), nullable=True))
    op.add_column("users", sa.Column("offchain_funds", sa.BigInteger(), nullable=True))

    # Update existing rows with default values
    op.execute("UPDATE users SET onchain_funds = 0 WHERE onchain_funds IS NULL")
    op.execute("UPDATE users SET offchain_funds = 0 WHERE offchain_funds IS NULL")

    # Alter columns to disallow NULL values
    op.alter_column("users", "onchain_funds", nullable=False)
    op.alter_column("users", "offchain_funds", nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("users", "offchain_funds")
    op.drop_column("users", "onchain_funds")
    op.drop_index(
        "ix_event_purchased_tickets_owned_by", table_name="event_purchased_tickets"
    )
    op.drop_index(
        "ix_event_purchased_tickets_event_id", table_name="event_purchased_tickets"
    )
    op.drop_table("event_purchased_tickets")
    op.drop_index("ix_event_ticket_types_event_id", table_name="event_ticket_types")
    op.drop_table("event_ticket_types")
    op.drop_index("ix_event_banks_event_id", table_name="event_banks")
    op.drop_table("event_banks")
    sa.execute("DROP TYPE tickettype")
    sa.execute("DROP TYPE ticketcurrency")
    sa.execute("DROP TYPE ticketonchainstatus")
    # ### end Alembic commands ###
